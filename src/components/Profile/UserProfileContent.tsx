"use client";
import React, { useState, useRef, ChangeEvent, useEffect } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { usePathname, useRouter } from 'next/navigation';
import styles from './UserProfileContent.module.css';
import type { UserProfilePageData } from 'wxqryy/lib/data'; 
import { useAuth } from 'wxqryy/components/AuthProvider'; 
import profileCup from 'wxqryy/assets/profile_cup.png'; 
import profileDocs from 'wxqryy/assets/profile_docs.png'; 
import profileStats from 'wxqryy/assets/profile_stats.png'; 
import profileMyPub from 'wxqryy/assets/profile_mypublic.png'; 
import profileSuccess from 'wxqryy/assets/profile_success.png'; 
import profileChar from 'wxqryy/assets/profile_char.png'; 

const ResumeIcon: React.FC<{ className?: string }> = ({ className }) => <Image src={profileDocs} alt="–†–µ–∑—é–º–µ" className={className} width={32} height={32} />;
const AchievementsIcon: React.FC<{ className?: string }> = ({ className }) => <Image src={profileCup} alt="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è" className={className} width={32} height={32} />;
const AccountIcon: React.FC<{ className?: string }> = ({ className }) => <Image src={profileChar} alt="–ê–∫–∫–∞—É–Ω—Ç" className={className} width={32} height={32} />;
const PublicationsIcon: React.FC<{ className?: string }> = ({ className }) => <Image src={profileMyPub} alt="–ü—É–±–ª–∏–∫–∞—Ü–∏–∏" className={className} width={32} height={32} />;
const ApplicationsIcon: React.FC<{ className?: string }> = ({ className }) => <Image src={profileSuccess} alt="–ó–∞—è–≤–∫–∏" className={className} width={32} height={32} />;
const AnalyticsIcon: React.FC<{ className?: string }> = ({ className }) => <Image src={profileStats} alt="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞" className={className} width={32} height={32} />;

const profileActions = [
  { id: 'resume', label: '–†–µ–∑—é–º–µ', iconComponent: ResumeIcon, href: "/profile/resume", iconColorClass: styles.iconColorResume },
  { id: 'achievements', label: '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è', iconComponent: AchievementsIcon, href: "/profile/achievements", iconColorClass: styles.iconColorAchievements },
  { id: 'account', label: '–ê–∫–∫–∞—É–Ω—Ç', iconComponent: AccountIcon, href: "/profile/account", iconColorClass: styles.iconColorAccount },
  { id: 'publications', label: '–ú–æ–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏', iconComponent: PublicationsIcon, href: "/profile/my-publications", iconColorClass: styles.iconColorPublications },
  { id: 'applications', label: '–ú–æ–∏ –∑–∞—è–≤–∫–∏', iconComponent: ApplicationsIcon, href: "/profile/applications", iconColorClass: styles.iconColorApplications },
  { id: 'analytics', label: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è', iconComponent: AnalyticsIcon, href: "/profile/analytics", iconColorClass: styles.iconColorAnalytics },
];

interface UserProfileContentProps {
  userData: UserProfilePageData | null;
}

const DEFAULT_AVATAR_URL = '/default-avatar.png'; 

const UserProfileContent: React.FC<UserProfileContentProps> = ({ userData: initialUserDataProp }) => {
  const [currentDisplayAvatar, setCurrentDisplayAvatar] = useState<string>(DEFAULT_AVATAR_URL);
  const [isUploadingAvatar, setIsUploadingAvatar] = useState(false);
  const [avatarUploadMessage, setAvatarUploadMessage] = useState<{ type: 'success' | 'error'; text: string } | null>(null);

  const fileInputRef = useRef<HTMLInputElement>(null);
  const pathname = usePathname();
  const router = useRouter();

  const { accessToken, user: authUserContext, updateUserContextData } = useAuth();

  useEffect(() => {
    let newUrl = DEFAULT_AVATAR_URL;
    if (initialUserDataProp?.avatarUrl) {
      newUrl = initialUserDataProp.avatarUrl;
    } else if (authUserContext?.avatarUrl) {
      newUrl = authUserContext.avatarUrl;
    }
    if (newUrl !== currentDisplayAvatar) {
      setCurrentDisplayAvatar(newUrl);
    }
  }, [initialUserDataProp, authUserContext, currentDisplayAvatar]);

  useEffect(() => {
    let timerId: NodeJS.Timeout | null = null;
    if (avatarUploadMessage) {
      timerId = setTimeout(() => {
        setAvatarUploadMessage(null);
      }, 5000);
    }
    return () => {
      if (timerId) clearTimeout(timerId);
    };
  }, [avatarUploadMessage]);

  const handleAvatarContainerClick = () => {
    if (isUploadingAvatar) return;
    fileInputRef.current?.click();
  };

  const handleFileSelected = async (event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (fileInputRef.current) fileInputRef.current.value = ""; 
    if (!file) return;

    const allowedTypes = ['image/png', 'image/jpeg', 'image/jpg'];
    if (!allowedTypes.includes(file.type.toLowerCase())) {
      setAvatarUploadMessage({ type: 'error', text: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPG, PNG.' });
      return;
    }
    const maxSizeMB = 10;
    if (file.size > maxSizeMB * 1024 * 1024) {
      setAvatarUploadMessage({ type: 'error', text: `–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º ${maxSizeMB}MB).` });
      return;
    }

    setIsUploadingAvatar(true);
    setAvatarUploadMessage(null);
    const formData = new FormData();
    formData.append('avatar', file);

    try {
      const response = await fetch('/api/user/avatar', {
        method: 'POST',
        headers: { ...(accessToken ? { 'Authorization': `Bearer ${accessToken}` } : {}) },
        body: formData,
      });

      let result: { success?: boolean; message?: string; avatarUrl?: string };
      try {
        result = await response.json();
      } catch (errorParsingJson: unknown) { 
        console.warn(
            `[UserProfileContent] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∫–∞–∫ JSON. –°—Ç–∞—Ç—É—Å: ${response.status}.`,
            errorParsingJson 
        );
        if (!response.ok) {

            throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}. –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.`);
        }

        result = { success: false, message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–æ–∂–∏–¥–∞–ª—Å—è JSON).' };
      }

      if (!response.ok) {

        throw new Error(result?.message || `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status} ${response.statusText}`);
      }

      if (result?.success && result?.avatarUrl) {
        setAvatarUploadMessage({ type: 'success', text: result.message || '–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!' });
        setCurrentDisplayAvatar(result.avatarUrl);

        if (updateUserContextData) {
          updateUserContextData({ avatarUrl: result.avatarUrl });
        }

        console.log("[UserProfileContent handleFileSelected] –í—ã–∑–æ–≤ router.refresh()...");
        router.refresh(); 
      } else {

        throw new Error(result?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä. –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
      }
    } catch (error: unknown) { 
      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞.';
      if (error instanceof Error) {
        errorMessage = error.message;
      }
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:", error);
      setAvatarUploadMessage({ type: 'error', text: errorMessage });
    } finally {
      setIsUploadingAvatar(false);
    }
  };

  if (!initialUserDataProp) {
    return (
      <main className={styles.mainContent}>
        <div className={styles.contentCard} style={{ textAlign: 'center', padding: '20px' }}>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è...</p>
        </div>
      </main>
    );
  }

  const { name, progress } = initialUserDataProp;
  const mainProgressPercent = progress.total > 0
    ? (progress.completed / progress.total) * 100 : 0;
  const nextStepNumber = progress.completed + 1;
  const isProfileComplete = progress.completed >= progress.total;

  return (
    <main className={styles.mainContent}>
      <section className={styles.contentCard}>
        <div className={styles.welcomeHeader}>
          <div className={styles.avatarManagementSection}>
            <div
              className={`${styles.avatarWrapper} ${isUploadingAvatar ? styles.avatarWrapperDisabled : ''}`}
              onClick={handleAvatarContainerClick}
              title={isUploadingAvatar ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä"}
              role="button" tabIndex={isUploadingAvatar ? -1 : 0}
              onKeyDown={(e) => { if (!isUploadingAvatar && (e.key === 'Enter' || e.key === ' ')) handleAvatarContainerClick(); }}
              aria-disabled={isUploadingAvatar}
            >
              {isUploadingAvatar ? (
                <div className={styles.uploadingSpinner}></div>
              ) : (
                <>
                  <Image
                    key={currentDisplayAvatar} 
                    src={currentDisplayAvatar}
                    alt="–ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                    width={140} height={140}
                    className={styles.avatarImage}
                    unoptimized 
                    priority 
                    onError={() => {
                      if (currentDisplayAvatar !== DEFAULT_AVATAR_URL) {
                        console.warn(`[UserProfileContent Image onError] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${currentDisplayAvatar}. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.`);
                        setCurrentDisplayAvatar(DEFAULT_AVATAR_URL);
                      }
                    }}
                  />
                  <div className={styles.avatarOverlayIconContainer}>
                    <span className={styles.avatarUploadCameraIcon}>üì∑</span>
                  </div>
                </>
              )}
            </div>
            <input
              type="file" ref={fileInputRef} className={styles.hiddenFileInput}
              onChange={handleFileSelected}
              accept="image/png, image/jpeg, image/jpg"
              disabled={isUploadingAvatar}
            />
            {avatarUploadMessage && (
              <p className={`${styles.uploadStatusMessage} ${avatarUploadMessage.type === 'error' ? styles.uploadError : styles.uploadSuccess
                }`}>
                {avatarUploadMessage.text}
              </p>
            )}
          </div>
          <h1>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}!</h1>
        </div>

        <div className={styles.mainProgressBarOuter}>
          <div className={styles.mainProgressBarInner} style={{ width: `${mainProgressPercent}%` }}></div>
        </div>
        <p className={styles.mainProgressText}>
          –ó–∞–≤–µ—Ä—à–µ–Ω–æ {progress.completed} –∏–∑ {progress.total} —à–∞–≥–æ–≤
        </p>
      </section>

      {!isProfileComplete && (
        <section className={`${styles.contentCard} ${styles.ctaCard}`}>
          <h2>–®–∞–≥ {nextStepNumber}. –°–æ–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ —Ä–µ–∑—é–º–µ. –ò–ò –≤–∞–º –≤ —ç—Ç–æ–º –ø–æ–º–æ–∂–µ—Ç!</h2>
          <p>–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ —à–∞–≥–∏ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–æ–ª—É—á–∏—Ç–µ 100 XP</p>
          <Link href="/profile/resume" className={styles.ctaButton}>–°–æ–∑–¥–∞—Ç—å</Link>
        </section>
      )}
      {isProfileComplete && (
        <section className={`${styles.contentCard} ${styles.ctaCard}`}>
          <h2>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω!</h2>
          <p>–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.</p>
        </section>
      )}

      <section className={styles.actionsGrid}>
        {profileActions.map(action => {
          const isActive = pathname === action.href;
          const IconComponent = action.iconComponent;
          return (
            <Link key={action.id} href={action.href}
              className={`${styles.actionItem} ${isActive ? styles.actionItemActive : ''}`}>
              <div className={styles.actionIconContainer}>
                <IconComponent className={`${styles.actionIconSvg} ${!isActive ? action.iconColorClass : ''}`} />
              </div>
              <span>{action.label}</span>
            </Link>
          );
        })}
      </section>
    </main>
  );
};

export default UserProfileContent;